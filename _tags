# OASIS_START
# DO NOT EDIT (digest: cae6b5ae8e5b1909c0ee0fd4bbc3696c)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library efl
"src/efl.cmxs": use_efl
"src/evas.cmx": for-pack(Efl)
"src/evas_object.cmx": for-pack(Efl)
"src/evas_object_smart.cmx": for-pack(Efl)
"src/ecore.cmx": for-pack(Efl)
"src/edje.cmx": for-pack(Efl)
"src/elm.cmx": for-pack(Efl)
"src/elm_object.cmx": for-pack(Efl)
"src/elm_layout.cmx": for-pack(Efl)
"src/elm_scroller.cmx": for-pack(Efl)
"src/elm_win.cmx": for-pack(Efl)
"src/elm_bg.cmx": for-pack(Efl)
"src/elm_label.cmx": for-pack(Efl)
"src/elm_box.cmx": for-pack(Efl)
"src/elm_button.cmx": for-pack(Efl)
"src/elm_frame.cmx": for-pack(Efl)
"src/elm_icon.cmx": for-pack(Efl)
"src/elm_entry.cmx": for-pack(Efl)
"src/elm_gengrid.cmx": for-pack(Efl)
"src/elm_check.cmx": for-pack(Efl)
"src/elm_inwin.cmx": for-pack(Efl)
"src/elm_win_inwin.cmx": for-pack(Efl)
"src/elm_naviframe.cmx": for-pack(Efl)
"src/elm_theme.cmx": for-pack(Efl)
"src/elm_radio.cmx": for-pack(Efl)
"src/elm_app.cmx": for-pack(Efl)
"src/elm_image.cmx": for-pack(Efl)
"src/elm_separator.cmx": for-pack(Efl)
"src/elm_notify.cmx": for-pack(Efl)
"src/elm_spinner.cmx": for-pack(Efl)
"src/elm_clock.cmx": for-pack(Efl)
"src/elm_hover.cmx": for-pack(Efl)
"src/ecore_timer.cmx": for-pack(Efl)
"src/elm_config_engine.cmx": for-pack(Efl)
"src/elm_fileselector.cmx": for-pack(Efl)
"src/elm_list.cmx": for-pack(Efl)
<src/efl.{cma,cmxa}>: oasis_library_efl_cclib
"src/libefl_stubs.lib": oasis_library_efl_cclib
"src/dllefl_stubs.dll": oasis_library_efl_cclib
"src/libefl_stubs.a": oasis_library_efl_cclib
"src/dllefl_stubs.so": oasis_library_efl_cclib
<src/efl.{cma,cmxa}>: use_libefl_stubs
# Executable test
<examples/test.{native,byte}>: use_efl
# Executable test2
"examples/test2.byte": use_efl
# Executable test3
"examples/test3.byte": use_efl
# Executable button_example_00
"examples/button_example_00.byte": use_efl
# Executable button_example_01
"examples/button_example_01.byte": use_efl
# Executable label_example_01
"examples/label_example_01.byte": use_efl
# Executable entry_example
"examples/entry_example.byte": use_efl
# Executable radio_example_01
"examples/radio_example_01.byte": use_efl
# Executable check_example_01
"examples/check_example_01.byte": use_efl
# Executable box_example_02
"examples/box_example_02.byte": use_efl
# Executable win_example
"examples/win_example.byte": use_efl
# Executable image_example_01
"examples/image_example_01.byte": use_efl
# Executable icon_example_01
"examples/icon_example_01.byte": use_efl
# Executable bg_example_01
"examples/bg_example_01.byte": use_efl
# Executable bg_example_02
"examples/bg_example_02.byte": use_efl
# Executable bg_example_03
"examples/bg_example_03.byte": use_efl
# Executable notify_example_01
"examples/notify_example_01.byte": use_efl
# Executable separaor_example_01
"examples/separator_example_01.byte": use_efl
# Executable layout_example_01
"examples/layout_example_01.byte": use_efl
# Executable layout_example_02
"examples/layout_example_02.byte": use_efl
# Executable layout_example_03
"examples/layout_example_03.byte": use_efl
# Executable inwin_example
"examples/inwin_example.byte": use_efl
# Executable fileselector_example
"examples/fileselector_example.byte": use_efl
<examples/*.ml{,i}>: use_efl
# OASIS_STOP
<src/eina_*>: efl
<src/evas_*>: efl
<src/edje_*>: efl
<src/elm_*>: efl
#<efl.{cma,cmxa}>: oasis_library_efl_cclib
#"libefl_stubs.lib": oasis_library_efl_cclib
#"dllefl_stubs.dll": oasis_library_efl_cclib
#"libefl_stubs.a": oasis_library_efl_cclib
#"dllefl_stubs.so": oasis_library_efl_cclib
